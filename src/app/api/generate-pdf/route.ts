import { NextRequest, NextResponse } from 'next/server';
import { jsPDF } from 'jspdf';

interface PaystubData {
  employeeName: string;
  companyName: string;
  payRate: string;
  payPeriod: string;
  hoursWorked: string;
  colorTheme?: string;
}

export async function POST(request: NextRequest) {
  try {
    const data: PaystubData = await request.json();
    
    // Create new PDF document
    const doc = new jsPDF();
    
    // Set color theme
    const colors = {
      blue: { primary: [59, 130, 246], secondary: [219, 234, 254] },
      green: { primary: [34, 197, 94], secondary: [220, 252, 231] },
      purple: { primary: [168, 85, 247], secondary: [243, 232, 255] },
      red: { primary: [239, 68, 68], secondary: [254, 226, 226] },
      gray: { primary: [75, 85, 99], secondary: [243, 244, 246] }
    };
    
    const theme = colors[data.colorTheme as keyof typeof colors] || colors.blue;
    
    // Header
    doc.setFillColor(theme.primary[0], theme.primary[1], theme.primary[2]);
    doc.rect(0, 0, 210, 30, 'F');
    
    doc.setTextColor(255, 255, 255);
    doc.setFontSize(20);
    doc.text('PaystubPro', 10, 20);
    doc.setFontSize(12);
    doc.text('Professional Paystub', 140, 20);
    
    // Company Info
    doc.setTextColor(0, 0, 0);
    doc.setFontSize(16);
    doc.text('PAYSTUB', 10, 45);
    
    doc.setFontSize(12);
    doc.text(`Company: ${data.companyName}`, 10, 60);
    doc.text(`Employee: ${data.employeeName}`, 10, 70);
    doc.text(`Pay Period: ${data.payPeriod}`, 10, 80);
    
    // Earnings Section
    doc.setFillColor(theme.secondary[0], theme.secondary[1], theme.secondary[2]);
    doc.rect(10, 90, 190, 8, 'F');
    
    doc.setFontSize(12);
    doc.setTextColor(theme.primary[0], theme.primary[1], theme.primary[2]);
    doc.text('EARNINGS', 10, 96);
    
    doc.setTextColor(0, 0, 0);
    doc.text('Description', 10, 110);
    doc.text('Hours', 80, 110);
    doc.text('Rate', 120, 110);
    doc.text('Amount', 160, 110);
    
    // Calculate earnings
    const hours = parseFloat(data.hoursWorked) || 0;
    const hourlyRate = parseFloat(data.payRate.replace(/[^0-9.]/g, '')) || 15;
    const grossPay = hours * hourlyRate;
    
    doc.text('Regular Pay', 10, 125);
    doc.text(hours.toString(), 80, 125);
    doc.text(`$${hourlyRate.toFixed(2)}`, 120, 125);
    doc.text(`$${grossPay.toFixed(2)}`, 160, 125);
    
    // Deductions Section
    doc.setFillColor(theme.secondary[0], theme.secondary[1], theme.secondary[2]);
    doc.rect(10, 140, 190, 8, 'F');
    
    doc.setTextColor(theme.primary[0], theme.primary[1], theme.primary[2]);
    doc.text('DEDUCTIONS', 10, 146);
    
    doc.setTextColor(0, 0, 0);
    doc.text('Description', 10, 160);
    doc.text('Amount', 160, 160);
    
    // Calculate taxes
    const federalTax = grossPay * 0.12;
    const socialSecurity = grossPay * 0.062;
    const medicare = grossPay * 0.0145;
    const stateTax = grossPay * 0.05;
    const totalDeductions = federalTax + socialSecurity + medicare + stateTax;
    
    doc.text('Federal Tax', 10, 175);
    doc.text(`$${federalTax.toFixed(2)}`, 160, 175);
    doc.text('Social Security', 10, 185);
    doc.text(`$${socialSecurity.toFixed(2)}`, 160, 185);
    doc.text('Medicare', 10, 195);
    doc.text(`$${medicare.toFixed(2)}`, 160, 195);
    doc.text('State Tax', 10, 205);
    doc.text(`$${stateTax.toFixed(2)}`, 160, 205);
    
    // Net Pay Section
    doc.setFillColor(theme.primary[0], theme.primary[1], theme.primary[2]);
    doc.rect(10, 220, 190, 15, 'F');
    
    doc.setTextColor(255, 255, 255);
    doc.setFontSize(14);
    const netPay = grossPay - totalDeductions;
    doc.text('NET PAY', 10, 230);
    doc.text(`$${netPay.toFixed(2)}`, 160, 230);
    
    // Footer
    doc.setTextColor(128, 128, 128);
    doc.setFontSize(10);
    doc.text('Generated by PaystubPro - Professional HR Solutions', 10, 270);
    doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 10, 280);
    
    // Convert PDF to base64
    const pdfBuffer = doc.output('arraybuffer');
    const pdfBase64 = Buffer.from(pdfBuffer).toString('base64');
    
    return NextResponse.json({ 
      success: true, 
      pdf: pdfBase64,
      filename: `paystub-${data.employeeName.replace(/\s+/g, '-')}-${Date.now()}.pdf`
    });
    
  } catch (error) {
    console.error('PDF generation error:', error);
    return NextResponse.json({ 
      success: false, 
      error: 'Failed to generate PDF' 
    }, { status: 500 });
  }
}